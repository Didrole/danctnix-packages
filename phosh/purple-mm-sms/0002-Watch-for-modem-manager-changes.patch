From 9ba9ca341ea7f84ed945dd9f653091ed351efcd4 Mon Sep 17 00:00:00 2001
From: Mohammed Sadiq <sadiq@sadiqpk.org>
Date: Fri, 10 Jul 2020 08:55:23 +0530
Subject: [PATCH] Watch for modem manager changes

We can't assume that modem manager is always available, especially
during startup. Let's watch for the service and act accordingly.
---
 mm-sms.c | 61 +++++++++++++++++++++++++++++++++++++-------------------
 mm-sms.h |  1 +
 2 files changed, 41 insertions(+), 21 deletions(-)

diff --git a/mm-sms.c b/mm-sms.c
index 1b9af3c..f8ec959 100644
--- a/mm-sms.c
+++ b/mm-sms.c
@@ -913,30 +913,41 @@ cb_mm_manager_new (GDBusConnection *connection,
 }
 
 
-static gboolean
-pur_mm_get_modem_manager (void)
+static void
+mm_appeared_cb (GDBusConnection *connection)
 {
-  GDBusConnection   *connection;
-  g_autoptr(GError)  error = NULL;
+  g_assert (G_IS_DBUS_CONNECTION (connection));
 
-  connection = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
+  g_debug ("Modem Manager appeard");
 
-  if (connection) {
-    mm_manager_new (connection,
-                    G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE,
-                    NULL,
-                    (GAsyncReadyCallback) cb_mm_manager_new,
-                    NULL);
+  mm_manager_new (connection,
+                  G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE,
+                  NULL,
+                  (GAsyncReadyCallback) cb_mm_manager_new,
+                  NULL);
+}
 
-    g_object_unref (connection);
+static void
+mm_vanished_cb (GDBusConnection *connection)
+{
+  g_assert (G_IS_DBUS_CONNECTION (connection));
 
-    return TRUE;
-  } else {
-    purple_debug_info ("mm-sms", "Error connecting to ModemManager: %s\n", error->message);
-    g_debug ("Error connecting to ModemManager: %s", error->message);
+  g_debug ("Modem Manager vanished");
 
-    return FALSE;
-  }
+  pur_mm_state (PUR_MM_STATE_NO_MANAGER);
+}
+
+static void
+pur_mm_get_modem_manager (void)
+{
+  pur_mm_data_t *mm_sms = pur_mm_get_data ();
+
+  mm_sms->mm_watch_id = g_bus_watch_name (G_BUS_TYPE_SYSTEM,
+                                          MM_DBUS_SERVICE,
+                                          G_BUS_NAME_WATCHER_FLAGS_AUTO_START,
+                                          (GBusNameAppearedCallback)mm_appeared_cb,
+                                          (GBusNameVanishedCallback)mm_vanished_cb,
+                                          NULL, NULL);
 }
 
 
@@ -1058,12 +1069,12 @@ pur_mm_disconnect (void)
 {
   pur_mm_data_t *mm_sms = pur_mm_get_data ();
 
-  if (mm_sms->device_arr->len) {
+  if (mm_sms->device_arr && mm_sms->device_arr->len) {
     g_ptr_array_set_size (mm_sms->device_arr, 0);
     g_ptr_array_unref(mm_sms->device_arr);
   }
 
-  if (mm_sms->sms_arr->len) {
+  if (mm_sms->sms_arr && mm_sms->sms_arr->len) {
     g_ptr_array_unref(mm_sms->sms_arr);
   }
 
@@ -1109,6 +1120,10 @@ pur_mm_state (int state)
                       "mm-sms-state",
                       state);
 
+  /* This can happen if ModemManager has never run */
+  if (!pc)
+    return;
+
   switch (state) {
     case PUR_MM_STATE_MODEM_FOUND:
       if (!mm_sms->modem_available) {
@@ -1179,7 +1194,7 @@ pur_mm_state (int state)
         pur_mm_disconnect ();
 
         if (mm_sms->mm) {
-          g_object_unref (mm_sms->mm);
+          g_clear_object (&mm_sms->mm);
         }
 
         purple_connection_error_reason  (pc, PURPLE_CONNECTION_ERROR_NETWORK_ERROR,
@@ -1288,6 +1303,10 @@ plugin_unload (PurplePlugin *plugin)
 static void
 plugin_destroy (PurplePlugin *plugin)
 {
+  pur_mm_data_t *mm_sms = pur_mm_get_data ();
+
+  g_clear_handle_id (&mm_sms->mm_watch_id, g_bus_unwatch_name);
+
   purple_debug_info ("mm-sms", "shutting down\n");
   g_debug ("Shutting down");
 }
diff --git a/mm-sms.h b/mm-sms.h
index ba35341..70d178f 100644
--- a/mm-sms.h
+++ b/mm-sms.h
@@ -22,6 +22,7 @@ typedef struct {
   gboolean          sms_delivery_report;
 
   guint             lock_type;
+  guint             mm_watch_id;
 } pur_mm_data_t;
 
 pur_mm_data_t *pur_mm_get_data (void);
-- 
2.27.0

