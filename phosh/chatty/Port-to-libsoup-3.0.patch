From 91b3b0b3d856f463831b66db6ddfe4c4d8fa1d65 Mon Sep 17 00:00:00 2001
From: marcin <marcin@ipv8.pl>
Date: Tue, 9 Aug 2022 07:02:06 +0200
Subject: [PATCH] Port to libsoup-3.0

Co-authored-By: Mohammed Sadiq <sadiq@sadiqpk.org>
Co-authored-By: Eugenio Paolantonio (g7) <me@medesimo.eu>
Signed-off-by: Eugenio Paolantonio (g7) <me@medesimo.eu>
---
 src/dialogs/chatty-settings-dialog.c | 23 ++++++++---
 src/matrix/chatty-ma-account.c       |  5 +--
 src/matrix/matrix-api.c              | 22 +++++------
 src/matrix/matrix-net.c              | 20 ++++++----
 src/matrix/matrix-utils.c            | 58 ++++++++--------------------
 src/matrix/matrix-utils.h            |  3 --
 src/matrix/meson.build               |  2 +-
 7 files changed, 60 insertions(+), 73 deletions(-)

diff --git a/src/dialogs/chatty-settings-dialog.c b/src/dialogs/chatty-settings-dialog.c
index bcd505e..4cf2ca5 100644
--- a/src/dialogs/chatty-settings-dialog.c
+++ b/src/dialogs/chatty-settings-dialog.c
@@ -618,14 +618,25 @@ settings_homeserver_entry_changed (ChattySettingsDialog *self,
 
   server = gtk_entry_get_text (entry);
 
-  if (server && *server) {
-    g_autoptr(SoupURI) uri = NULL;
 
-    uri = soup_uri_new (gtk_entry_get_text (entry));
+  if (server && *server) {
+    g_autoptr(GUri) uri = NULL;
+    const char *scheme = NULL;
+    const char *path = NULL;
+    const char *host = NULL;
+
+    uri = g_uri_parse (gtk_entry_get_text (entry), G_URI_FLAGS_NONE, NULL);
+    if (uri) {
+      scheme = g_uri_get_scheme (uri);
+      path = g_uri_get_path (uri);
+      host = g_uri_get_host (uri);
+    }
 
-    valid = SOUP_URI_VALID_FOR_HTTP (uri);
-    /* We need an absolute path URI */
-    valid = valid && *uri->host && g_str_equal (soup_uri_get_path (uri), "/");
+    valid = scheme && *scheme;
+    valid = valid && (g_str_equal (scheme, "http") || g_str_equal (scheme, "https"));
+    valid = valid && host && *host;
+    valid = valid && !g_str_has_suffix (host, ".");
+    valid = valid && (!path || !*path);
   }
 
   if (valid)
diff --git a/src/matrix/chatty-ma-account.c b/src/matrix/chatty-ma-account.c
index 54cc9a6..fc0113c 100644
--- a/src/matrix/chatty-ma-account.c
+++ b/src/matrix/chatty-ma-account.c
@@ -467,9 +467,8 @@ matrix_account_sync_cb (ChattyMaAccount *self,
              error->code, error->message);
 
   if (error &&
-      ((error->domain == SOUP_HTTP_ERROR &&
-        error->code <= SOUP_STATUS_TLS_FAILED &&
-        error->code > SOUP_STATUS_CANCELLED) ||
+      (error->domain == SOUP_TLD_ERROR ||
+       error->domain == G_TLS_ERROR ||
        g_error_matches (error, G_IO_ERROR, G_IO_ERROR_NETWORK_UNREACHABLE) ||
        g_error_matches (error, G_IO_ERROR, G_IO_ERROR_TIMED_OUT) ||
        error->domain == G_RESOLVER_ERROR ||
diff --git a/src/matrix/matrix-api.c b/src/matrix/matrix-api.c
index 2a37ada..f93bb5f 100644
--- a/src/matrix/matrix-api.c
+++ b/src/matrix/matrix-api.c
@@ -512,9 +512,8 @@ handle_common_errors (MatrixApi *self,
    * The G_RESOLVER_ERROR may be suggesting that the hostname is wrong, but we don't
    * know if it's network/DNS/Proxy error. So keep retrying.
    */
-  if ((error->domain == SOUP_HTTP_ERROR &&
-       error->code <= SOUP_STATUS_TLS_FAILED &&
-       error->code > SOUP_STATUS_CANCELLED) ||
+  if ((error->domain == SOUP_TLD_ERROR &&
+       error->domain == G_TLS_ERROR) ||
       g_error_matches (error, G_IO_ERROR, G_IO_ERROR_NETWORK_UNREACHABLE) ||
       g_error_matches (error, G_IO_ERROR, G_IO_ERROR_TIMED_OUT) ||
       error->domain == G_RESOLVER_ERROR ||
@@ -1250,22 +1249,23 @@ void
 matrix_api_set_homeserver (MatrixApi  *self,
                            const char *homeserver)
 {
-  g_autoptr(SoupURI) uri = NULL;
+  g_autoptr(GUri) uri = NULL;
   GString *host;
 
   g_return_if_fail (MATRIX_IS_API (self));
 
-  uri = soup_uri_new (homeserver);
-  if (!homeserver || !uri ||
-      !SOUP_URI_VALID_FOR_HTTP (uri))
+  if (!homeserver || !(uri = g_uri_parse (homeserver, SOUP_HTTP_URI_FLAGS, NULL)))
     return;
 
   host = g_string_new (NULL);
-  g_string_append (host, soup_uri_get_scheme (uri));
+  g_string_append (host, g_uri_get_scheme (uri));
   g_string_append (host, "://");
-  g_string_append (host, uri->host);
-  if (!soup_uri_uses_default_port (uri))
-    g_string_append_printf (host, ":%d", soup_uri_get_port (uri));
+  g_string_append (host, g_uri_get_host (uri));
+  if (!(((g_strcmp0 (g_uri_get_scheme (uri), "http") == 0) && g_uri_get_port (uri) == 80) ||
+      ((g_strcmp0 (g_uri_get_scheme (uri), "https") == 0) && g_uri_get_port (uri) == 443)))
+    {
+      g_string_append_printf (host, ":%d", g_uri_get_port (uri));
+    }
 
   g_free (self->homeserver);
   self->homeserver = g_string_free (host, FALSE);
diff --git a/src/matrix/matrix-net.c b/src/matrix/matrix-net.c
index d5305cf..99a0bc5 100644
--- a/src/matrix/matrix-net.c
+++ b/src/matrix/matrix-net.c
@@ -301,7 +301,8 @@ queue_data (MatrixNet  *self,
             GTask      *task)
 {
   g_autoptr(SoupMessage) message = NULL;
-  g_autoptr(SoupURI) uri = NULL;
+  g_autoptr(GUri) uri = NULL;
+  g_autoptr(GBytes) content_data = NULL;
   GCancellable *cancellable;
   SoupMessagePriority msg_priority;
   int priority = 0;
@@ -315,8 +316,8 @@ queue_data (MatrixNet  *self,
             method == SOUP_METHOD_POST ||
             method == SOUP_METHOD_PUT);
 
-  uri = soup_uri_new (self->homeserver);
-  soup_uri_set_path (uri, uri_path);
+  uri = g_uri_parse (self->homeserver, SOUP_HTTP_URI_FLAGS, NULL);
+  uri = soup_uri_copy (uri, SOUP_URI_PATH, uri_path, SOUP_URI_NONE);
 
   if (self->access_token) {
     if (!query)
@@ -324,12 +325,12 @@ queue_data (MatrixNet  *self,
                                      (GDestroyNotify)matrix_utils_free_buffer);
 
     g_hash_table_replace (query, g_strdup ("access_token"), g_strdup (self->access_token));
-    soup_uri_set_query_from_form (uri, query);
+    uri = soup_uri_copy(uri, SOUP_URI_QUERY, soup_form_encode_hash(query), SOUP_URI_NONE);
     g_hash_table_unref (query);
   }
 
   message = soup_message_new_from_uri (method, uri);
-  soup_message_headers_append (message->request_headers, "Accept-Encoding", "gzip");
+  soup_message_headers_append (soup_message_get_request_headers (message), "Accept-Encoding", "gzip");
 
   priority = GPOINTER_TO_INT (g_object_get_data (G_OBJECT (task), "priority"));
 
@@ -347,11 +348,14 @@ queue_data (MatrixNet  *self,
   soup_message_set_priority (message, msg_priority);
 
   if (data)
-    soup_message_set_request (message, "application/json", SOUP_MEMORY_TAKE, data, size);
+    {
+      content_data = g_bytes_new_static (data, size);
+      soup_message_set_request_body_from_bytes (message, "application/json", content_data);
+    }
 
   cancellable = g_task_get_cancellable (task);
   g_task_set_task_data (task, g_object_ref (message), g_object_unref);
-  soup_session_send_async (self->soup_session, message, cancellable,
+  soup_session_send_async (self->soup_session, message, msg_priority, cancellable,
                            session_send_cb, task);
 }
 
@@ -593,7 +597,7 @@ matrix_net_get_file_async (MatrixNet             *self,
   if (message)
     chatty_message_emit_updated (message);
 
-  soup_session_send_async (self->file_session, msg, cancellable,
+  soup_session_send_async (self->file_session, msg, 0, cancellable,
                            net_get_file_stream_cb, task);
 }
 
diff --git a/src/matrix/matrix-utils.c b/src/matrix/matrix-utils.c
index 8c7b62b..7f0a43c 100644
--- a/src/matrix/matrix-utils.c
+++ b/src/matrix/matrix-utils.c
@@ -363,37 +363,6 @@ matrix_utils_json_object_get_array (JsonObject *object,
   return NULL;
 }
 
-JsonObject *
-matrix_utils_get_message_json_object (SoupMessage *message,
-                                      const char  *member)
-{
-  g_autoptr(JsonParser) parser = NULL;
-  g_autoptr(SoupBuffer) buffer = NULL;
-  JsonObject *object = NULL;
-  gboolean is_json;
-
-  if (!message || !message->response_body)
-    return NULL;
-
-  buffer = soup_message_body_flatten (message->response_body);
-  parser = json_parser_new ();
-  is_json = json_parser_load_from_data (parser, buffer->data, buffer->length, NULL);
-
-  if (is_json) {
-    JsonNode *root;
-
-    root = json_parser_get_root (parser);
-
-    if (root && JSON_NODE_HOLDS_OBJECT (root))
-      object = json_node_get_object (root);
-
-    if (member && object)
-      object = json_object_get_object_member (object, member);
-  }
-
-  return object ? json_object_ref (object) : NULL;
-}
-
 static gboolean
 cancel_read_uri (gpointer user_data)
 {
@@ -447,16 +416,17 @@ matrix_utils_handle_ssl_error (SoupMessage *message)
   GApplication *app;
   GtkWidget *dialog;
   GtkWindow *window = NULL;
-  SoupURI *uri;
+  GUri *uri;
   g_autofree char *msg = NULL;
   const char *host;
   GTlsCertificateFlags err_flags;
   gboolean cancelled = FALSE;
 
   if (!SOUP_IS_MESSAGE (message) ||
-      !soup_message_get_https_status (message, &cert, &err_flags) ||
-      !err_flags)
+      !(err_flags = soup_message_get_tls_peer_certificate_errors (message)))
     return cancelled;
+  
+  cert = soup_message_get_tls_peer_certificate(message);
 
   app = g_application_get_default ();
   if (app)
@@ -466,7 +436,7 @@ matrix_utils_handle_ssl_error (SoupMessage *message)
     return cancelled;
 
   uri = soup_message_get_uri (message);
-  host = soup_uri_get_host (uri);
+  host = g_uri_get_host (uri);
 
   switch (err_flags) {
   case G_TLS_CERTIFICATE_UNKNOWN_CA:
@@ -549,11 +519,8 @@ uri_file_read_cb (GObject      *object,
     return;
   }
 
-  soup_message_get_https_status (message, NULL, &err_flags);
-
   if (message &&
-      soup_message_get_https_status (message, NULL, &err_flags) &&
-      err_flags) {
+      (err_flags = soup_message_get_tls_peer_certificate_errors (message))) {
     guint timeout_id, timeout;
 
     timeout = GPOINTER_TO_UINT (g_object_get_data (G_OBJECT (task), "timeout"));
@@ -595,6 +562,14 @@ message_network_event_cb (SoupMessage        *msg,
   g_object_set_data_full (user_data, "address", address, g_object_unref);
 }
 
+static gboolean
+accept_certificate_callback (SoupMessage *msg, GTlsCertificate *certificate,
+                             GTlsCertificateFlags tls_errors, gpointer user_data)
+{
+    // Returning TRUE trusts it anyway.
+    return TRUE;
+}
+
 void
 matrix_utils_read_uri_async (const char          *uri,
                              guint                timeout,
@@ -641,9 +616,10 @@ matrix_utils_read_uri_async (const char          *uri,
                            G_CALLBACK (message_network_event_cb), task,
                            G_CONNECT_AFTER);
   session = soup_session_new ();
-  g_object_set (G_OBJECT (session), SOUP_SESSION_SSL_STRICT, FALSE, NULL);
+  /* Accept invalid certificates */
+  g_signal_connect (message, "accept-certificate", G_CALLBACK (accept_certificate_callback), NULL);
 
-  soup_session_send_async (session, message, cancel,
+  soup_session_send_async (session, message, 0, cancel,
                            uri_file_read_cb,
                            g_steal_pointer (&task));
 }
diff --git a/src/matrix/matrix-utils.h b/src/matrix/matrix-utils.h
index 4ad1e1a..d9644d3 100644
--- a/src/matrix/matrix-utils.h
+++ b/src/matrix/matrix-utils.h
@@ -41,9 +41,6 @@ JsonObject   *matrix_utils_json_object_get_object   (JsonObject    *object,
 JsonArray    *matrix_utils_json_object_get_array    (JsonObject    *object,
                                                      const char    *member);
 
-JsonObject   *matrix_utils_get_message_json_object  (SoupMessage   *message,
-                                                     const char    *member);
-
 void          matrix_utils_read_uri_async           (const char    *uri,
                                                      guint          timeout,
                                                      GCancellable  *cancellable,
diff --git a/src/matrix/meson.build b/src/matrix/meson.build
index 18d77c3..36a4ef7 100644
--- a/src/matrix/meson.build
+++ b/src/matrix/meson.build
@@ -14,7 +14,7 @@ libsrc += files([
 
 chatty_deps += [
   dependency('libgcrypt'),
-  dependency('libsoup-2.4'),
+  dependency('libsoup-3.0'),
   dependency('json-glib-1.0'),
   libolm_dep,
 ]
