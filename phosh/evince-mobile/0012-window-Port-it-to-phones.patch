From c6e325000cf753612373b889581a80c068d5b407 Mon Sep 17 00:00:00 2001
From: Adrien Plazas <kekun.plazas@laposte.net>
Date: Tue, 10 Dec 2019 10:04:30 +0100
Subject: [PATCH 12/12] window: Port it to phones

Fixes https://source.puri.sm/Librem5/Apps_Issues/issues/150.
---
 shell/ev-window.c | 235 +++++++++++++++++++++++++---------------------
 1 file changed, 127 insertions(+), 108 deletions(-)

diff --git a/shell/ev-window.c b/shell/ev-window.c
index 70aed02f..63fbe686 100644
--- a/shell/ev-window.c
+++ b/shell/ev-window.c
@@ -40,6 +40,8 @@
 #include <glib/gi18n.h>
 #include <gio/gio.h>
 #include <gtk/gtk.h>
+#define HANDY_USE_UNSTABLE_API 1
+#include <handy.h>
 
 #include "dzl-file-manager.h"
 #include "ev-find-sidebar.h"
@@ -134,8 +136,9 @@ typedef struct {
 
 	GtkWidget *main_box;
 	GtkWidget *toolbar;
-	GtkWidget *hpaned;
+	GtkWidget *leaflet;
 	GtkWidget *view_box;
+	GtkWidget *sidebar_stack;
 	GtkWidget *sidebar;
 	GtkWidget *search_box;
 	GtkWidget *search_bar;
@@ -205,7 +208,7 @@ typedef struct {
 	gboolean in_reload;
 	EvFileMonitor *monitor;
 	guint setup_document_idle;
-	
+
 	EvDocument *document;
 	EvHistory *history;
 	EvWindowPageMode page_mode;
@@ -363,7 +366,7 @@ static void	ev_window_popup_cmd_save_attachment_as  (GSimpleAction    *action,
 							 gpointer          user_data);
 static void	view_handle_link_cb 			(EvView           *view,
 							 gint              old_page,
-							 EvLink           *link, 
+							 EvLink           *link,
 							 EvWindow         *window);
 static void	bookmark_activated_cb 		        (EvSidebarBookmarks *sidebar_bookmarks,
 							 gint              old_page,
@@ -652,7 +655,7 @@ static void
 set_widget_visibility (GtkWidget *widget, gboolean visible)
 {
 	g_assert (GTK_IS_WIDGET (widget));
-	
+
 	if (visible)
 		gtk_widget_show (widget);
 	else
@@ -668,12 +671,13 @@ update_chrome_visibility (EvWindow *window)
 
 	presentation = EV_WINDOW_IS_PRESENTATION (priv);
 
-	toolbar = ((priv->chrome & EV_CHROME_TOOLBAR) != 0  || 
+	toolbar = ((priv->chrome & EV_CHROME_TOOLBAR) != 0  ||
 		   (priv->chrome & EV_CHROME_RAISE_TOOLBAR) != 0) && !presentation;
 	sidebar = (priv->chrome & EV_CHROME_SIDEBAR) != 0 && priv->document && !presentation;
 
 	set_widget_visibility (priv->toolbar, toolbar);
-	set_widget_visibility (priv->sidebar, sidebar);
+	set_widget_visibility (priv->sidebar, TRUE);
+	hdy_leaflet_set_visible_child (HDY_LEAFLET (priv->leaflet), sidebar ? priv->sidebar_stack : priv->view_box);
 
 	if (toolbar && ev_document_model_get_fullscreen (priv->model))
 		ev_window_fullscreen_show_toolbar (window);
@@ -792,12 +796,12 @@ ev_window_error_message (EvWindow    *window,
 	va_start (args, format);
 	msg = g_strdup_vprintf (format, args);
 	va_end (args);
-	
+
 	area = ev_message_area_new (GTK_MESSAGE_ERROR,
 				    msg,
 				    NULL);
 	g_free (msg);
-	
+
 	if (error)
 		ev_message_area_set_secondary_text (EV_MESSAGE_AREA (area), error->message);
 	g_signal_connect (area, "response",
@@ -828,7 +832,7 @@ ev_window_warning_message (EvWindow    *window,
 				    msg,
 				    NULL);
 	g_free (msg);
-	
+
 	g_signal_connect (area, "response",
 			  G_CALLBACK (ev_window_message_area_response_cb),
 			  window);
@@ -1272,7 +1276,7 @@ setup_chrome_from_metadata (EvWindow *window)
 	if (ev_metadata_get_boolean (priv->metadata, "show_toolbar", &show_toolbar))
 		update_chrome_flag (window, EV_CHROME_TOOLBAR, show_toolbar);
 	if (ev_metadata_get_boolean (priv->metadata, "sidebar_visibility", &show_sidebar))
-		update_chrome_flag (window, EV_CHROME_SIDEBAR, show_sidebar);
+		update_chrome_flag (window, EV_CHROME_SIDEBAR, FALSE);
 	update_chrome_visibility (window);
 }
 
@@ -1286,9 +1290,6 @@ setup_sidebar_from_metadata (EvWindow *window)
 	if (!priv->metadata)
 		return;
 
-	if (ev_metadata_get_int (priv->metadata, "sidebar_size", &sidebar_size))
-		gtk_paned_set_position (GTK_PANED (priv->hpaned), sidebar_size);
-
 	if (ev_metadata_get_string (priv->metadata, "sidebar_page", &page_id))
 		ev_window_sidebar_set_current_page (window, page_id);
 }
@@ -1580,13 +1581,9 @@ ev_window_setup_default (EvWindow *ev_window)
 
 	/* Chrome */
 	update_chrome_flag (ev_window, EV_CHROME_SIDEBAR,
-			    g_settings_get_boolean (settings, "show-sidebar"));
+			    FALSE);
 	update_chrome_visibility (ev_window);
 
-	/* Sidebar */
-	gtk_paned_set_position (GTK_PANED (priv->hpaned),
-				g_settings_get_int (settings, "sidebar-size"));
-
 	/* Document model */
 	ev_document_model_set_continuous (model, g_settings_get_boolean (settings, "continuous"));
 	ev_document_model_set_dual_page (model, g_settings_get_boolean (settings, "dual-page"));
@@ -1705,7 +1702,7 @@ ev_window_setup_document (EvWindow *ev_window)
 
 	if (EV_WINDOW_IS_PRESENTATION (priv))
 		gtk_widget_grab_focus (priv->presentation_view);
-	else if (!gtk_search_bar_get_search_mode (GTK_SEARCH_BAR (priv->search_bar)))
+	else if (!hdy_search_bar_get_search_mode (HDY_SEARCH_BAR (priv->search_bar)))
 		gtk_widget_grab_focus (priv->view);
 
 	return FALSE;
@@ -1829,7 +1826,7 @@ ev_window_clear_reload_job (EvWindow *ev_window)
 	if (priv->reload_job != NULL) {
 		if (!ev_job_is_finished (priv->reload_job))
 			ev_job_cancel (priv->reload_job);
-		
+
 		g_signal_handlers_disconnect_by_func (priv->reload_job, ev_window_reload_job_cb, ev_window);
 		g_object_unref (priv->reload_job);
 		priv->reload_job = NULL;
@@ -1933,7 +1930,7 @@ ev_window_load_job_cb (EvJob *job,
 		g_signal_connect_swapped (priv->monitor, "changed",
 					  G_CALLBACK (ev_window_file_changed),
 					  ev_window);
-		
+
 		ev_window_clear_load_job (ev_window);
 		return;
 	}
@@ -1941,9 +1938,9 @@ ev_window_load_job_cb (EvJob *job,
 	if (g_error_matches (job->error, EV_DOCUMENT_ERROR, EV_DOCUMENT_ERROR_ENCRYPTED) &&
 	    EV_IS_DOCUMENT_SECURITY (document)) {
 		gchar *password;
-		
+
 		setup_view_from_metadata (ev_window);
-		
+
 		/* First look whether password is in keyring */
 		password = ev_keyring_lookup_password (priv->uri);
 		if (password) {
@@ -1985,7 +1982,7 @@ ev_window_load_job_cb (EvJob *job,
 					 display_name);
 		g_free (display_name);
 		ev_window_clear_load_job (ev_window);
-	}	
+	}
 }
 
 static void
@@ -2013,7 +2010,7 @@ ev_window_reload_job_cb (EvJob    *job,
 	}
 
 	/* Restart the search after reloading */
-	if (gtk_search_bar_get_search_mode (GTK_SEARCH_BAR (priv->search_bar)))
+	if (hdy_search_bar_get_search_mode (HDY_SEARCH_BAR (priv->search_bar)))
 		ev_search_box_restart (EV_SEARCH_BOX (priv->search_box));
 
 	ev_window_clear_reload_job (ev_window);
@@ -2051,7 +2048,7 @@ ev_window_close_dialogs (EvWindow *ev_window)
 	if (priv->print_dialog)
 		gtk_widget_destroy (priv->print_dialog);
 	priv->print_dialog = NULL;
-	
+
 	if (priv->properties)
 		gtk_widget_destroy (priv->properties);
 	priv->properties = NULL;
@@ -2267,7 +2264,7 @@ window_open_file_copy_ready_cb (GFile        *source,
 		ev_window_load_remote_failed (ev_window, error);
 		g_object_unref (source);
 	}
-	
+
 	g_error_free (error);
 }
 
@@ -2279,7 +2276,7 @@ window_open_file_copy_progress_cb (goffset   n_bytes,
 	EvWindowPrivate *priv = GET_PRIVATE (ev_window);
 	gchar *status;
 	gdouble fraction;
-	
+
 	if (!priv->message_area)
 		return;
 
@@ -2289,7 +2286,7 @@ window_open_file_copy_progress_cb (goffset   n_bytes,
 	fraction = n_bytes / (gdouble)total_bytes;
 	status = g_strdup_printf (_("Downloading document (%d%%)"),
 				  (gint)(fraction * 100));
-	
+
 	ev_progress_message_area_set_status (EV_PROGRESS_MESSAGE_AREA (priv->message_area),
 					     status);
 	ev_progress_message_area_set_fraction (EV_PROGRESS_MESSAGE_AREA (priv->message_area),
@@ -2340,7 +2337,7 @@ ev_window_load_file_remote (EvWindow *ev_window,
 			   G_PRIORITY_DEFAULT,
 			   priv->progress_cancellable,
 			   (GFileProgressCallback)window_open_file_copy_progress_cb,
-			   ev_window, 
+			   ev_window,
 			   (GAsyncReadyCallback)window_open_file_copy_ready_cb,
 			   ev_window);
 	g_object_unref (target_file);
@@ -2404,7 +2401,7 @@ ev_window_open_uri (EvWindow       *ev_window,
 		g_object_unref (priv->monitor);
 		priv->monitor = NULL;
 	}
-	
+
 	ev_window_close_dialogs (ev_window);
 	ev_window_clear_load_job (ev_window);
 	ev_window_clear_local_uri (ev_window);
@@ -2542,7 +2539,7 @@ ev_window_open_recent_view (EvWindow *ev_window)
 	if (priv->recent_view)
 		return;
 
-	gtk_widget_hide (priv->hpaned);
+	gtk_widget_hide (priv->leaflet);
 
 	priv->recent_view = EV_RECENT_VIEW (ev_recent_view_new ());
 	g_signal_connect_object (priv->recent_view,
@@ -2571,7 +2568,7 @@ ev_window_destroy_recent_view (EvWindow *ev_window)
 
 	gtk_widget_destroy (GTK_WIDGET (priv->recent_view));
 	priv->recent_view = NULL;
-	gtk_widget_show (priv->hpaned);
+	gtk_widget_show (priv->leaflet);
 }
 
 static void
@@ -2597,7 +2594,7 @@ show_reloading_progress (EvWindow *ev_window)
 
 	if (priv->message_area)
 		return FALSE;
-	
+
 	text = g_strdup_printf (_("Reloading document from %s"),
 				priv->uri);
 	area = ev_progress_message_area_new ("view-refresh-symbolic",
@@ -2633,7 +2630,7 @@ reload_remote_copy_ready_cb (GFile        *remote,
 	} else {
 		ev_window_reload_local (ev_window);
 	}
-		
+
 	g_object_unref (remote);
 }
 
@@ -2645,7 +2642,7 @@ reload_remote_copy_progress_cb (goffset   n_bytes,
 	EvWindowPrivate *priv = GET_PRIVATE (ev_window);
 	gchar *status;
 	gdouble fraction;
-	
+
 	if (!priv->message_area)
 		return;
 
@@ -2655,7 +2652,7 @@ reload_remote_copy_progress_cb (goffset   n_bytes,
 	fraction = n_bytes / (gdouble)total_bytes;
 	status = g_strdup_printf (_("Downloading document (%d%%)"),
 				  (gint)(fraction * 100));
-	
+
 	ev_progress_message_area_set_status (EV_PROGRESS_MESSAGE_AREA (priv->message_area),
 					     status);
 	ev_progress_message_area_set_fraction (EV_PROGRESS_MESSAGE_AREA (priv->message_area),
@@ -2702,14 +2699,14 @@ query_remote_uri_mtime_cb (GFile        *remote,
 		priv->uri_mtime = mtime;
 
 		ev_window_reset_progress_cancellable (ev_window);
-		
+
 		target_file = g_file_new_for_uri (priv->local_uri);
 		g_file_copy_async (remote, target_file,
 				   G_FILE_COPY_OVERWRITE,
 				   G_PRIORITY_DEFAULT,
 				   priv->progress_cancellable,
 				   (GFileProgressCallback)reload_remote_copy_progress_cb,
-				   ev_window, 
+				   ev_window,
 				   (GAsyncReadyCallback)reload_remote_copy_ready_cb,
 				   ev_window);
 		g_object_unref (target_file);
@@ -2999,7 +2996,7 @@ window_save_file_copy_ready_cb (GFile        *src,
 
 	if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
 		gchar *name;
-		
+
 		name = g_file_get_basename (dst);
 		ev_window_error_message (ev_window, error,
 					 _("The file could not be saved as “%s”."),
@@ -3022,7 +3019,7 @@ window_save_file_copy_progress_cb (goffset n_bytes,
 
 	ev_window = EV_WINDOW (g_object_get_data (G_OBJECT (dst), "ev-window"));
 	EvWindowPrivate *priv = GET_PRIVATE (ev_window);
-	
+
 	if (!priv->message_area)
 		return;
 
@@ -3092,7 +3089,7 @@ ev_window_clear_save_job (EvWindow *ev_window)
 	if (priv->save_job != NULL) {
 		if (!ev_job_is_finished (priv->save_job))
 			ev_job_cancel (priv->save_job);
-		
+
 		g_signal_handlers_disconnect_by_func (priv->save_job,
 						      ev_window_save_job_cb,
 						      ev_window);
@@ -3585,7 +3582,7 @@ ev_window_print_update_pending_jobs_message (EvWindow *ev_window,
 		ev_window_set_message_area (ev_window, NULL);
 		return;
 	}
-	
+
 	if (n_jobs > 1) {
 		text = g_strdup_printf (ngettext ("%d pending job in queue",
 						  "%d pending jobs in queue",
@@ -3627,7 +3624,7 @@ ev_window_print_operation_done (EvPrintOperation       *op,
 
 
 		ev_print_operation_get_error (op, &error);
-		
+
 		/* The message area is already used by
 		 * the printing progress, so it's better to
 		 * use a popup dialog in this case
@@ -3643,7 +3640,7 @@ ev_window_print_operation_done (EvPrintOperation       *op,
 				  G_CALLBACK (gtk_widget_destroy),
 				  NULL);
 		gtk_widget_show (dialog);
-		
+
 		g_error_free (error);
 	}
 		break;
@@ -3689,7 +3686,7 @@ ev_window_print_operation_status_changed (EvPrintOperation *op,
 
 	status = ev_print_operation_get_status (op);
 	fraction = ev_print_operation_get_progress (op);
-	
+
 	if (!priv->message_area) {
 		GtkWidget   *area;
 		const gchar *job_name;
@@ -4434,7 +4431,7 @@ ev_window_cmd_edit_find_next (GSimpleAction *action,
 	if (EV_WINDOW_IS_PRESENTATION (priv))
 		return;
 
-	search_mode_enabled = gtk_search_bar_get_search_mode (GTK_SEARCH_BAR (priv->search_bar));
+	search_mode_enabled = hdy_search_bar_get_search_mode (HDY_SEARCH_BAR (priv->search_bar));
 	ev_window_show_find_bar (ev_window, FALSE);
 
 	/* Use idle to make sure view allocation happens before find */
@@ -4463,7 +4460,7 @@ ev_window_cmd_edit_find_previous (GSimpleAction *action,
 	if (EV_WINDOW_IS_PRESENTATION (priv))
 		return;
 
-	search_mode_enabled = gtk_search_bar_get_search_mode (GTK_SEARCH_BAR (priv->search_bar));
+	search_mode_enabled = hdy_search_bar_get_search_mode (HDY_SEARCH_BAR (priv->search_bar));
 	ev_window_show_find_bar (ev_window, FALSE);
 
 	/* Use idle to make sure view allocation happens before find */
@@ -4484,18 +4481,6 @@ ev_window_cmd_edit_copy (GSimpleAction *action,
 	ev_view_copy (EV_VIEW (priv->view));
 }
 
-static void
-ev_window_sidebar_position_change_cb (GObject    *object,
-				      GParamSpec *pspec,
-				      EvWindow   *ev_window)
-{
-	EvWindowPrivate *priv = GET_PRIVATE (ev_window);
-
-	if (priv->metadata && !ev_window_is_empty (ev_window))
-		ev_metadata_set_int (priv->metadata, "sidebar_size",
-				     gtk_paned_get_position (GTK_PANED (object)));
-}
-
 static void
 ev_window_update_links_model (EvWindow *window)
 {
@@ -4833,7 +4818,7 @@ ev_window_run_presentation (EvWindow *window)
 			    priv->presentation_view,
 			    TRUE, TRUE, 0);
 
-	gtk_widget_hide (priv->hpaned);
+	gtk_widget_hide (priv->leaflet);
 	update_chrome_visibility (window);
 
 	gtk_widget_grab_focus (priv->presentation_view);
@@ -4868,7 +4853,7 @@ ev_window_stop_presentation (EvWindow *window,
 			      priv->presentation_view);
 	priv->presentation_view = NULL;
 
-	gtk_widget_show (priv->hpaned);
+	gtk_widget_show (priv->leaflet);
 	update_chrome_visibility (window);
 	if (unfullscreen_window)
 		gtk_window_unfullscreen (GTK_WINDOW (window));
@@ -5058,8 +5043,6 @@ ev_window_cmd_edit_save_settings (GSimpleAction *action,
 	}
 	g_settings_set_boolean (settings, "show-sidebar",
 				gtk_widget_get_visible (priv->sidebar));
-	g_settings_set_int (settings, "sidebar-size",
-			    gtk_paned_get_position (GTK_PANED (priv->hpaned)));
 	g_settings_set_string (settings, "sidebar-page",
 			       ev_window_sidebar_get_current_page_id (ev_window));
 	g_settings_set_boolean (settings, "enable-spellchecking",
@@ -5328,7 +5311,7 @@ ev_window_cmd_escape (GSimpleAction *action,
 
 	ev_view_autoscroll_stop (EV_VIEW (priv->view));
 
-	if (gtk_search_bar_get_search_mode (GTK_SEARCH_BAR (priv->search_bar)))
+	if (hdy_search_bar_get_search_mode (HDY_SEARCH_BAR (priv->search_bar)))
 		ev_window_close_find_bar (window);
 	else if (ev_document_model_get_fullscreen (priv->model))
 		ev_window_stop_fullscreen (window, TRUE);
@@ -5909,12 +5892,12 @@ search_next_cb (EvSearchBox *search_box,
 }
 
 static void
-search_bar_search_mode_enabled_changed (GtkSearchBar *search_bar,
+search_bar_search_mode_enabled_changed (HdySearchBar *search_bar,
 					GParamSpec   *param,
 					EvWindow     *ev_window)
 {
 	EvWindowPrivate *priv = GET_PRIVATE (ev_window);
-	gboolean enabled = gtk_search_bar_get_search_mode (search_bar);
+	gboolean enabled = hdy_search_bar_get_search_mode (search_bar);
 
 	ev_view_find_set_highlight_search (EV_VIEW (priv->view), enabled);
 	ev_window_update_actions_sensitivity (ev_window);
@@ -5938,7 +5921,8 @@ ev_window_show_find_bar (EvWindow *ev_window,
 {
 	EvWindowPrivate *priv = GET_PRIVATE (ev_window);
 
-	if (gtk_widget_get_visible (priv->find_sidebar)) {
+	if (gtk_stack_get_visible_child (GTK_STACK (priv->sidebar_stack)) == priv->find_sidebar) {
+		hdy_leaflet_set_visible_child_name (HDY_LEAFLET (priv->leaflet), "sidebar");
 		gtk_widget_grab_focus (priv->search_box);
 		return;
 	}
@@ -5954,13 +5938,10 @@ ev_window_show_find_bar (EvWindow *ev_window,
 	ev_history_freeze (priv->history);
 
 	g_object_ref (priv->sidebar);
-	gtk_container_remove (GTK_CONTAINER (priv->hpaned), priv->sidebar);
-	gtk_paned_pack1 (GTK_PANED (priv->hpaned),
-			 priv->find_sidebar, FALSE, FALSE);
-	gtk_widget_show (priv->find_sidebar);
+	gtk_stack_set_visible_child (GTK_STACK (priv->sidebar_stack), priv->find_sidebar);
 
 
-	gtk_search_bar_set_search_mode (GTK_SEARCH_BAR (priv->search_bar), TRUE);
+	hdy_search_bar_set_search_mode (HDY_SEARCH_BAR (priv->search_bar), TRUE);
 	gtk_widget_grab_focus (priv->search_box);
 	g_action_group_change_action_state (G_ACTION_GROUP (ev_window), "toggle-find", g_variant_new_boolean (TRUE));
 
@@ -5978,17 +5959,13 @@ ev_window_close_find_bar (EvWindow *ev_window)
 {
 	EvWindowPrivate *priv = GET_PRIVATE (ev_window);
 
-	if (!gtk_widget_get_visible (priv->find_sidebar))
+	if (gtk_stack_get_visible_child (GTK_STACK (priv->sidebar_stack)) != priv->find_sidebar)
 		return;
 
 	g_object_ref (priv->find_sidebar);
-	gtk_container_remove (GTK_CONTAINER (priv->hpaned),
-			      priv->find_sidebar);
-	gtk_paned_pack1 (GTK_PANED (priv->hpaned),
-			 priv->sidebar, FALSE, FALSE);
-	gtk_widget_hide (priv->find_sidebar);
+	gtk_stack_set_visible_child (GTK_STACK (priv->sidebar_stack), priv->sidebar);
 
-	gtk_search_bar_set_search_mode (GTK_SEARCH_BAR (priv->search_bar), FALSE);
+	hdy_search_bar_set_search_mode (HDY_SEARCH_BAR (priv->search_bar), FALSE);
 	gtk_widget_grab_focus (priv->view);
 	g_action_group_change_action_state (G_ACTION_GROUP (ev_window), "toggle-find", g_variant_new_boolean (FALSE));
 
@@ -6633,6 +6610,22 @@ view_actions_focus_in_cb (GtkWidget *widget, GdkEventFocus *event, EvWindow *win
 	return FALSE;
 }
 
+static void
+leaflet_visible_child_update_cb (EvWindow *window)
+{
+	EvWindowPrivate *priv = GET_PRIVATE (window);
+	GtkWidget *widget;
+	gboolean show_sidebar;
+
+	widget = hdy_leaflet_get_visible_child (HDY_LEAFLET (priv->leaflet));
+	show_sidebar = widget == priv->sidebar_stack;
+
+	g_message ("VISIBLE CHILD %s", hdy_leaflet_get_visible_child_name (HDY_LEAFLET (priv->leaflet)));
+	update_chrome_flag (window, EV_CHROME_SIDEBAR, show_sidebar);
+	update_chrome_visibility (window);
+	ev_toolbar_set_sidebar_visible (EV_TOOLBAR (priv->toolbar), show_sidebar);
+}
+
 static void
 sidebar_page_main_widget_update_cb (GObject *ev_sidebar_page,
 				    GParamSpec         *pspec,
@@ -6773,7 +6766,7 @@ open_remote_link (EvWindow *window, EvLinkAction *action)
 	gchar *dir;
 
 	dir = g_path_get_dirname (priv->uri);
-	
+
 	uri = g_build_filename (dir, ev_link_action_get_filename (action),
 				NULL);
 	g_free (dir);
@@ -6963,7 +6956,7 @@ image_save_dialog_response_cb (GtkFileChooserNative *fc,
 	uri = gtk_file_chooser_get_uri (GTK_FILE_CHOOSER (fc));
 	filter = gtk_file_chooser_get_filter (GTK_FILE_CHOOSER (fc));
 	format = g_object_get_data (G_OBJECT (filter), "pixbuf-format");
-	
+
 	if (format == NULL) {
 		format = get_gdk_pixbuf_format_by_extension (uri);
 	}
@@ -6978,7 +6971,7 @@ image_save_dialog_response_cb (GtkFileChooserNative *fc,
 	}
 
 	if (format == NULL) {
-		ev_window_error_message (ev_window, NULL, 
+		ev_window_error_message (ev_window, NULL,
 					 "%s",
 					 _("Couldn’t find appropriate format to save image"));
 		g_free (uri);
@@ -7008,10 +7001,10 @@ image_save_dialog_response_cb (GtkFileChooserNative *fc,
 	gdk_pixbuf_save (pixbuf, filename, file_format, &error, NULL);
 	g_free (file_format);
 	g_object_unref (pixbuf);
-	
+
     has_error:
 	if (error) {
-		ev_window_error_message (ev_window, error, 
+		ev_window_error_message (ev_window, error,
 					 "%s", _("The image could not be saved."));
 		g_error_free (error);
 		g_free (filename);
@@ -7030,7 +7023,7 @@ image_save_dialog_response_cb (GtkFileChooserNative *fc,
 				       source_file, target_file);
 		g_object_unref (source_file);
 	}
-	
+
 	g_free (filename);
 	g_object_unref (target_file);
 	g_object_unref (fc);
@@ -7203,7 +7196,7 @@ ev_window_popup_cmd_open_attachment (GSimpleAction *action,
 		ev_attachment_open (attachment, screen, gtk_get_current_event_time (), &error);
 
 		if (error) {
-			ev_window_error_message (window, error, 
+			ev_window_error_message (window, error,
 						 "%s", _("Unable to open attachment"));
 			g_error_free (error);
 		}
@@ -7270,7 +7263,7 @@ ev_window_popup_cmd_save_attachment_as (GSimpleAction *action,
 
 	if (g_list_length (priv->attach_list) == 1)
 		attachment = (EvAttachment *) priv->attach_list->data;
-	
+
 	fc = gtk_file_chooser_native_new (
 		_("Save Attachment"),
 		GTK_WINDOW (window),
@@ -7479,7 +7472,9 @@ ev_window_init (EvWindow *ev_window)
 	GtkBuilder *builder;
 	GError *error = NULL;
 	GtkWidget *sidebar_widget;
+	GtkWidget *separator;
 	GtkWidget *overlay;
+	GtkWidget *column;
 	GtkWidget *searchbar_revealer;
 	GObject *mpkeys;
 	guint page_cache_mb;
@@ -7589,14 +7584,18 @@ ev_window_init (EvWindow *ev_window)
 			    priv->annots_toolbar, FALSE, TRUE, 0);
 
 	/* Search Bar */
-	priv->search_bar = gtk_search_bar_new ();
-	gtk_search_bar_set_show_close_button (GTK_SEARCH_BAR (priv->search_bar), TRUE);
+	priv->search_bar = hdy_search_bar_new ();
+	hdy_search_bar_set_show_close_button (HDY_SEARCH_BAR (priv->search_bar), TRUE);
+
+	column = hdy_column_new ();
+	hdy_column_set_maximum_width (HDY_COLUMN (column), 600);
+	gtk_container_add (GTK_CONTAINER (priv->search_bar),
+			   column);
+	gtk_widget_show (column);
 
 	priv->search_box = ev_search_box_new (priv->model);
 	search_entry = GTK_ENTRY (ev_search_box_get_entry (EV_SEARCH_BOX (priv->search_box)));
-	gtk_entry_set_width_chars (search_entry, 32);
-	gtk_entry_set_max_length (search_entry, 512);
-	gtk_container_add (GTK_CONTAINER (priv->search_bar),
+	gtk_container_add (GTK_CONTAINER (column),
 			   priv->search_box);
 	gtk_widget_show (priv->search_box);
 
@@ -7610,7 +7609,7 @@ ev_window_init (EvWindow *ev_window)
 	gtk_container_add (GTK_CONTAINER (searchbar_revealer), priv->search_bar);
 	gtk_widget_show (GTK_WIDGET (searchbar_revealer));
 
-	/* We don't use gtk_search_bar_connect_entry, because it clears the entry when the
+	/* We don't use hdy_search_bar_connect_entry, because it clears the entry when the
 	 * search is closed, but we want to keep the current search.
 	 */
 	gtk_box_pack_start (GTK_BOX (priv->main_box),
@@ -7618,22 +7617,26 @@ ev_window_init (EvWindow *ev_window)
 	gtk_widget_show (priv->search_bar);
 
 	/* Add the main area */
-	priv->hpaned = gtk_paned_new (GTK_ORIENTATION_HORIZONTAL);
-	g_signal_connect (priv->hpaned,
-			  "notify::position",
-			  G_CALLBACK (ev_window_sidebar_position_change_cb),
-			  ev_window);
-	
-	gtk_paned_set_position (GTK_PANED (priv->hpaned), SIDEBAR_DEFAULT_SIZE);
-	gtk_box_pack_start (GTK_BOX (priv->main_box), priv->hpaned,
+	priv->leaflet = hdy_leaflet_new ();
+	hdy_leaflet_set_transition_type (HDY_LEAFLET (priv->leaflet),
+					 HDY_LEAFLET_TRANSITION_TYPE_UNDER);
+	hdy_leaflet_set_can_swipe_forward (HDY_LEAFLET (priv->leaflet), TRUE);
+	gtk_box_pack_start (GTK_BOX (priv->main_box), priv->leaflet,
 			    TRUE, TRUE, 0);
-	gtk_widget_show (priv->hpaned);
-	
+	gtk_widget_show (priv->leaflet);
+
+	priv->sidebar_stack = gtk_stack_new ();
+	gtk_container_add (GTK_CONTAINER (priv->leaflet), priv->sidebar_stack);
+	gtk_container_child_set (GTK_CONTAINER (priv->leaflet), priv->sidebar_stack, "name", "sidebar", NULL);
+	gtk_widget_set_size_request (priv->sidebar_stack, 240, -1);
+	gtk_widget_set_hexpand (priv->sidebar_stack, FALSE);
+	gtk_widget_set_hexpand_set (priv->sidebar_stack, TRUE);
+	gtk_widget_show (priv->sidebar_stack);
+
 	priv->sidebar = ev_sidebar_new ();
 	ev_sidebar_set_model (EV_SIDEBAR (priv->sidebar),
 			      priv->model);
-	gtk_paned_pack1 (GTK_PANED (priv->hpaned),
-			 priv->sidebar, FALSE, FALSE);
+	gtk_container_add (GTK_CONTAINER (priv->sidebar_stack), priv->sidebar);
 	gtk_widget_show (priv->sidebar);
 
 	/* Stub sidebar, for now */
@@ -7716,6 +7719,11 @@ ev_window_init (EvWindow *ev_window)
 			      LAYERS_SIDEBAR_ID, _("Layers"),
 			      LAYERS_SIDEBAR_ICON);
 
+	separator = gtk_separator_new (GTK_ORIENTATION_VERTICAL);
+	gtk_container_add (GTK_CONTAINER (priv->leaflet), separator);
+	gtk_container_child_set (GTK_CONTAINER (priv->leaflet), separator, "allow-visible", FALSE, NULL);
+	gtk_widget_show (separator);
+
 	priv->view_box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
 
 	overlay = gtk_overlay_new ();
@@ -7735,8 +7743,11 @@ ev_window_init (EvWindow *ev_window)
 			    TRUE, TRUE, 0);
 	gtk_widget_show (overlay);
 
-	gtk_paned_add2 (GTK_PANED (priv->hpaned),
-			priv->view_box);
+	gtk_container_add (GTK_CONTAINER (priv->leaflet), priv->view_box);
+	hdy_leaflet_set_visible_child (HDY_LEAFLET (priv->leaflet), priv->view_box);
+	gtk_container_child_set (GTK_CONTAINER (priv->leaflet), priv->view_box, "name", "view", NULL);
+	gtk_widget_set_size_request (priv->view_box, 360, -1);
+	gtk_widget_set_hexpand (priv->view_box, TRUE);
 	gtk_widget_show (priv->view_box);
 
 	priv->view = ev_view_new ();
@@ -7808,6 +7819,8 @@ ev_window_init (EvWindow *ev_window)
 			  "result-activated",
 			  G_CALLBACK (find_sidebar_result_activated_cb),
 			  ev_window);
+	gtk_container_add (GTK_CONTAINER (priv->sidebar_stack), priv->find_sidebar);
+	gtk_widget_show (priv->find_sidebar);
 
 	/* We own a ref on these widgets, as we can swap them in and out */
 	g_object_ref (priv->view);
@@ -7816,6 +7829,12 @@ ev_window_init (EvWindow *ev_window)
 	gtk_container_add (GTK_CONTAINER (priv->scrolled_window),
 			   priv->view);
 
+	/* Connect leaflet signals */
+	g_signal_connect_swapped (priv->leaflet,
+				  "notify::visible-child",
+				  G_CALLBACK (leaflet_visible_child_update_cb),
+				  ev_window);
+
 	/* Connect to model signals */
 	g_signal_connect_swapped (priv->model,
 				  "page-changed",
-- 
2.30.1

