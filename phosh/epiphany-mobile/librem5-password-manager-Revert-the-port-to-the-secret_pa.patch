From: Alexander Mikhaylenko <alexander.mikhaylenko@puri.sm>
Date: Tue, 22 Sep 2020 18:06:49 +0500
Subject: librem5: password-manager: Revert the port to the secret_password*
 API

We don't have new enough libsecret, so instead revert the change as it
shouldn't affect anything user-visible.

Reverts:
* https://gitlab.gnome.org/GNOME/epiphany/commit/e112d4707f9bd609e9ee2455bf3d02b11b03b717
* https://gitlab.gnome.org/GNOME/epiphany/commit/ed514f3ef43b323c51fb539274bef9dce0907ff2
* https://gitlab.gnome.org/GNOME/epiphany/commit/0b458c716e8a26559f8284189fc89baa5de365a2
---
 lib/sync/ephy-password-manager.c | 209 ++++++++++++++++-----------------------
 lib/sync/ephy-sync-service.c     |  35 ++++---
 2 files changed, 104 insertions(+), 140 deletions(-)

diff --git a/lib/sync/ephy-password-manager.c b/lib/sync/ephy-password-manager.c
index f8a15df..3c17b03 100644
--- a/lib/sync/ephy-password-manager.c
+++ b/lib/sync/ephy-password-manager.c
@@ -69,8 +69,6 @@ G_DEFINE_TYPE_WITH_CODE (EphyPasswordManager, ephy_password_manager, G_TYPE_OBJE
 typedef struct {
   EphyPasswordManagerQueryCallback callback;
   gpointer user_data;
-  GList *records;
-  guint n_matches;
 } QueryAsyncData;
 
 typedef struct {
@@ -111,7 +109,6 @@ query_async_data_free (QueryAsyncData *data)
 {
   g_assert (data);
 
-  g_list_free_full (data->records, g_object_unref);
   g_free (data);
 }
 
@@ -165,8 +162,6 @@ merge_passwords_async_data_free (MergePasswordsAsyncData *data)
   g_assert (data);
 
   g_object_unref (data->manager);
-  g_list_free_full (data->remotes_deleted, g_object_unref);
-  g_list_free_full (data->remotes_updated, g_object_unref);
   g_free (data);
 }
 
@@ -321,6 +316,8 @@ populate_cache_cb (GList    *records,
 
     ephy_password_manager_cache_add (self, origin, username);
   }
+
+  g_list_free_full (records, g_object_unref);
 }
 
 static void
@@ -370,9 +367,9 @@ ephy_password_manager_get_usernames_for_origin (EphyPasswordManager *self,
 }
 
 static void
-secret_password_store_cb (GObject               *source_object,
-                          GAsyncResult          *result,
-                          ManageRecordAsyncData *data)
+secret_service_store_cb (SecretService         *service,
+                         GAsyncResult          *result,
+                         ManageRecordAsyncData *data)
 {
   GError *error = NULL;
   const char *origin;
@@ -381,7 +378,7 @@ secret_password_store_cb (GObject               *source_object,
   origin = ephy_password_record_get_origin (data->record);
   username = ephy_password_record_get_username (data->record);
 
-  secret_password_store_finish (result, &error);
+  secret_service_store_finish (service, result, &error);
   if (error) {
     g_warning ("Failed to store password record for (%s, %s, %s, %s, %s): %s",
                origin,
@@ -403,6 +400,7 @@ ephy_password_manager_store_record (EphyPasswordManager *self,
                                     EphyPasswordRecord  *record)
 {
   GHashTable *attributes;
+  SecretValue *value;
   const char *origin;
   const char *target_origin;
   const char *username;
@@ -442,12 +440,14 @@ ephy_password_manager_store_record (EphyPasswordManager *self,
                                      username_field, password_field,
                                      modified);
 
-  secret_password_storev (EPHY_FORM_PASSWORD_SCHEMA,
-                          attributes, NULL, label, password, NULL,
-                          (GAsyncReadyCallback)secret_password_store_cb,
-                          manage_record_async_data_new (self, record, NULL));
+  value = secret_value_new (password, -1, "text/plain");
+  secret_service_store (NULL, EPHY_FORM_PASSWORD_SCHEMA,
+                        attributes, NULL, label, value, NULL,
+                        (GAsyncReadyCallback)secret_service_store_cb,
+                        manage_record_async_data_new (self, record, NULL));
 
   g_free (label);
+  secret_value_unref (value);
   g_hash_table_unref (attributes);
 }
 
@@ -493,6 +493,7 @@ update_password_cb (GList    *records,
     ephy_password_record_set_password (record, data->password);
     ephy_password_manager_store_record (data->manager, record);
     g_signal_emit_by_name (data->manager, "synchronizable-modified", record, FALSE);
+    g_list_free_full (records, g_object_unref);
   } else {
     LOG ("Attempted to update password record that doesn't exist (likely Epiphany bug)");
   }
@@ -555,110 +556,63 @@ ephy_password_manager_save (EphyPasswordManager *self,
 }
 
 static void
-retrieve_secret_cb (GObject        *source_object,
-                    GAsyncResult   *result,
-                    QueryAsyncData *data)
+secret_service_search_cb (SecretService  *service,
+                          GAsyncResult   *result,
+                          QueryAsyncData *data)
 {
-  SecretRetrievable *retrievable = SECRET_RETRIEVABLE (source_object);
-  GHashTable *attributes = NULL;
-  const char *id;
-  const char *origin;
-  const char *target_origin;
-  const char *username;
-  const char *username_field;
-  const char *password_field;
-  const char *timestamp;
-  gint64 created;
-  gint64 modified;
-  const char *password;
-  gint64 server_time_modified;
-  EphyPasswordRecord *record;
-  SecretValue *value = NULL;
+  GList *matches = NULL;
+  GList *records = NULL;
   GError *error = NULL;
 
-  value = secret_retrievable_retrieve_secret_finish (retrievable, result, &error);
-  if (!value) {
-    g_warning ("Failed to retrieve password: %s", error->message);
+  matches = secret_service_search_finish (service, result, &error);
+  if (error) {
+    g_warning ("Failed to search secrets in password schema: %s", error->message);
     g_error_free (error);
     goto out;
   }
 
-  attributes = secret_retrievable_get_attributes (retrievable);
-  id = g_hash_table_lookup (attributes, ID_KEY);
-  origin = g_hash_table_lookup (attributes, ORIGIN_KEY);
-  target_origin = g_hash_table_lookup (attributes, TARGET_ORIGIN_KEY);
-  username = g_hash_table_lookup (attributes, USERNAME_KEY);
-  username_field = g_hash_table_lookup (attributes, USERNAME_FIELD_KEY);
-  password_field = g_hash_table_lookup (attributes, PASSWORD_FIELD_KEY);
-  timestamp = g_hash_table_lookup (attributes, SERVER_TIME_MODIFIED_KEY);
-  created = secret_retrievable_get_created (retrievable);
-  modified = secret_retrievable_get_modified (retrievable);
-
-  LOG ("Found password record for (%s, %s, %s, %s, %s)",
-       origin, target_origin, username, username_field, password_field);
-
-  if (!id || !origin || !target_origin || !timestamp) {
-    LOG ("Password record is corrupted, skipping it...");
-    goto out;
-  }
-
-  password = secret_value_get_text (value);
+  for (GList *l = matches; l && l->data; l = l->next) {
+    SecretItem *item = (SecretItem *)l->data;
+    GHashTable *attributes = secret_item_get_attributes (item);
+    SecretValue *value = secret_item_get_secret (item);
+    const char *id = g_hash_table_lookup (attributes, ID_KEY);
+    const char *origin = g_hash_table_lookup (attributes, ORIGIN_KEY);
+    const char *target_origin = g_hash_table_lookup (attributes, TARGET_ORIGIN_KEY);
+    const char *username = g_hash_table_lookup (attributes, USERNAME_KEY);
+    const char *username_field = g_hash_table_lookup (attributes, USERNAME_FIELD_KEY);
+    const char *password_field = g_hash_table_lookup (attributes, PASSWORD_FIELD_KEY);
+    const char *timestamp = g_hash_table_lookup (attributes, SERVER_TIME_MODIFIED_KEY);
+    const char *password = secret_value_get (value, NULL);
+    gint64 server_time_modified;
+    EphyPasswordRecord *record;
+
+    LOG ("Found password record for (%s, %s, %s, %s, %s)",
+         origin, target_origin, username, username_field, password_field);
 
-  record = ephy_password_record_new (id, origin, target_origin,
-                                     username, password,
-                                     username_field, password_field,
-                                     created * 1000,
-                                     modified * 1000);
-  server_time_modified = g_ascii_strtod (timestamp, NULL);
-  ephy_synchronizable_set_server_time_modified (EPHY_SYNCHRONIZABLE (record),
-                                                server_time_modified);
-  data->records = g_list_prepend (data->records, record);
+    if (!id || !origin || !target_origin || !timestamp) {
+      LOG ("Password record is corrupted, skipping it...");
+      goto next;
+    }
 
-out:
-  if (value)
+    record = ephy_password_record_new (id, origin, target_origin,
+                                       username, password,
+                                       username_field, password_field,
+                                       secret_item_get_created (item) * 1000,
+                                       secret_item_get_modified (item) * 1000);
+    server_time_modified = g_ascii_strtod (timestamp, NULL);
+    ephy_synchronizable_set_server_time_modified (EPHY_SYNCHRONIZABLE (record),
+                                                  server_time_modified);
+    records = g_list_prepend (records, record);
+
+next:
     secret_value_unref (value);
-  if (attributes)
     g_hash_table_unref (attributes);
-  g_object_unref (retrievable);
-
-  if (--data->n_matches == 0) {
-    if (data->callback)
-      data->callback (data->records, data->user_data);
-    query_async_data_free (data);
-  }
-}
-
-static void
-secret_password_search_cb (GObject        *source_object,
-                           GAsyncResult   *result,
-                           QueryAsyncData *data)
-{
-  GList *matches;
-  GError *error = NULL;
-
-  matches = secret_password_search_finish (result, &error);
-  if (!matches) {
-    if (error) {
-      g_warning ("Failed to search secrets in password schema: %s", error->message);
-      g_error_free (error);
-    }
-    if (data->callback)
-      data->callback (NULL, data->user_data);
-    query_async_data_free (data);
-    return;
-  }
-
-  data->records = NULL;
-  data->n_matches = g_list_length (matches);
-
-  for (GList *l = matches; l; l = l->next) {
-    SecretRetrievable *retrievable = SECRET_RETRIEVABLE (l->data);
-    secret_retrievable_retrieve_secret (g_object_ref (retrievable),
-                                        NULL,
-                                        (GAsyncReadyCallback)retrieve_secret_cb,
-                                        data);
   }
 
+out:
+  if (data->callback)
+    data->callback (records, data->user_data);
+  query_async_data_free (data);
   g_list_free_full (matches, g_object_unref);
 }
 
@@ -685,12 +639,13 @@ ephy_password_manager_query (EphyPasswordManager              *self,
                                      username_field, password_field, -1);
   data = query_async_data_new (callback, user_data);
 
-  secret_password_searchv (EPHY_FORM_PASSWORD_SCHEMA,
-                           attributes,
-                           SECRET_SEARCH_ALL | SECRET_SEARCH_UNLOCK | SECRET_SEARCH_LOAD_SECRETS,
-                           NULL,
-                           (GAsyncReadyCallback)secret_password_search_cb,
-                           data);
+  secret_service_search (NULL,
+                         EPHY_FORM_PASSWORD_SCHEMA,
+                         attributes,
+                         SECRET_SEARCH_ALL | SECRET_SEARCH_UNLOCK | SECRET_SEARCH_LOAD_SECRETS,
+                         NULL,
+                         (GAsyncReadyCallback)secret_service_search_cb,
+                         data);
 
   g_hash_table_unref (attributes);
 }
@@ -714,11 +669,12 @@ ephy_password_manager_find (EphyPasswordManager *self,
   attributes = get_attributes_table (NULL, origin, target_origin, username,
                                      username_field, password_field, -1);
 
-  list = secret_password_searchv_sync (EPHY_FORM_PASSWORD_SCHEMA,
-                                       attributes,
-                                       SECRET_SEARCH_ALL | SECRET_SEARCH_UNLOCK | SECRET_SEARCH_LOAD_SECRETS,
-                                       NULL,
-                                       NULL);
+  list = secret_service_search_sync (NULL,
+                                     EPHY_FORM_PASSWORD_SCHEMA,
+                                     attributes,
+                                     SECRET_SEARCH_ALL | SECRET_SEARCH_UNLOCK | SECRET_SEARCH_LOAD_SECRETS,
+                                     NULL,
+                                     NULL);
 
   g_hash_table_unref (attributes);
 
@@ -726,14 +682,14 @@ ephy_password_manager_find (EphyPasswordManager *self,
 }
 
 static void
-secret_password_clear_cb (GObject      *source_object,
-                          GAsyncResult *result,
-                          gpointer      user_data)
+secret_service_clear_cb (SecretService *service,
+                         GAsyncResult  *result,
+                         gpointer       user_data)
 {
   g_autoptr (GError) error = NULL;
   ManageRecordAsyncData *data = user_data;
 
-  secret_password_clear_finish (result, &error);
+  secret_service_clear_finish (service, result, &error);
   if (error) {
     if (data->task)
       g_task_return_error (data->task, error);
@@ -782,9 +738,9 @@ ephy_password_manager_forget_record (EphyPasswordManager *self,
        ephy_password_record_get_username_field (record),
        ephy_password_record_get_password_field (record));
 
-  secret_password_clearv (EPHY_FORM_PASSWORD_SCHEMA, attributes, NULL,
-                          (GAsyncReadyCallback)secret_password_clear_cb,
-                          clear_cb_data);
+  secret_service_clear (NULL, EPHY_FORM_PASSWORD_SCHEMA, attributes, NULL,
+                        (GAsyncReadyCallback)secret_service_clear_cb,
+                        clear_cb_data);
 
   ephy_password_manager_cache_remove (self,
                                       ephy_password_record_get_origin (record),
@@ -808,6 +764,8 @@ forget_cb (GList    *records,
   } else {
     g_warn_if_reached ();
   }
+
+  g_list_free_full (records, g_object_unref);
 }
 
 gboolean
@@ -850,8 +808,8 @@ forget_all_cb (GList    *records,
   GHashTable *attributes;
 
   attributes = secret_attributes_build (EPHY_FORM_PASSWORD_SCHEMA, NULL);
-  secret_password_clearv (EPHY_FORM_PASSWORD_SCHEMA, attributes, NULL,
-                          (GAsyncReadyCallback)secret_password_clear_cb, NULL);
+  secret_service_clear (NULL, EPHY_FORM_PASSWORD_SCHEMA, attributes, NULL,
+                        (GAsyncReadyCallback)secret_service_clear_cb, NULL);
 
   for (GList *l = records; l && l->data; l = l->next)
     g_signal_emit_by_name (self, "synchronizable-deleted", l->data);
@@ -859,6 +817,7 @@ forget_all_cb (GList    *records,
   ephy_password_manager_cache_clear (self);
 
   g_hash_table_unref (attributes);
+  g_list_free_full (records, g_object_unref);
 }
 
 void
@@ -943,6 +902,7 @@ replace_existing_cb (GList    *records,
   else
     g_warn_if_reached ();
 
+  g_list_free_full (records, g_object_unref);
   manage_record_async_data_free (data);
 }
 
@@ -1224,6 +1184,7 @@ merge_cb (GList    *records,
 
   data->callback (to_upload, data->user_data);
 
+  g_list_free_full (records, g_object_unref);
   merge_passwords_async_data_free (data);
 }
 
diff --git a/lib/sync/ephy-sync-service.c b/lib/sync/ephy-sync-service.c
index b7f5600..88c1028 100644
--- a/lib/sync/ephy-sync-service.c
+++ b/lib/sync/ephy-sync-service.c
@@ -689,13 +689,13 @@ out:
 }
 
 static void
-forget_secrets_cb (GObject      *source_object,
-                   GAsyncResult *result,
-                   gpointer      user_data)
+forget_secrets_cb (SecretService *service,
+                   GAsyncResult  *result,
+                   gpointer       user_data)
 {
   GError *error = NULL;
 
-  secret_password_clear_finish (result, &error);
+  secret_service_clear_finish (service, result, &error);
   if (error) {
     if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
       g_warning ("Failed to clear sync secrets: %s", error->message);
@@ -720,8 +720,8 @@ ephy_sync_service_forget_secrets (EphySyncService *self)
   attributes = secret_attributes_build (EPHY_SYNC_SECRET_SCHEMA,
                                         EPHY_SYNC_SECRET_ACCOUNT_KEY, user,
                                         NULL);
-  secret_password_clearv (EPHY_SYNC_SECRET_SCHEMA, attributes, self->cancellable,
-                          (GAsyncReadyCallback)forget_secrets_cb, NULL);
+  secret_service_clear (NULL, EPHY_SYNC_SECRET_SCHEMA, attributes, self->cancellable,
+                        (GAsyncReadyCallback)forget_secrets_cb, NULL);
   g_hash_table_remove_all (self->secrets);
 
   g_hash_table_unref (attributes);
@@ -1698,7 +1698,7 @@ sync_frequency_changed_cb (GSettings       *settings,
 }
 
 static void
-load_secrets_cb (GObject         *source_object,
+load_secrets_cb (SecretService   *service,
                  GAsyncResult    *result,
                  EphySyncService *self)
 {
@@ -1710,7 +1710,7 @@ load_secrets_cb (GObject         *source_object,
   const char *message;
   const char *suggestion;
 
-  res = secret_password_search_finish (result, &error);
+  res = secret_service_search_finish (service, result, &error);
   if (error) {
     if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
       g_error_free (error);
@@ -1783,22 +1783,22 @@ ephy_sync_service_load_secrets (EphySyncService *self)
   attributes = secret_attributes_build (EPHY_SYNC_SECRET_SCHEMA,
                                         EPHY_SYNC_SECRET_ACCOUNT_KEY, user,
                                         NULL);
-  secret_password_searchv (EPHY_SYNC_SECRET_SCHEMA, attributes,
-                           SECRET_SEARCH_UNLOCK | SECRET_SEARCH_LOAD_SECRETS,
-                           self->cancellable, (GAsyncReadyCallback)load_secrets_cb, self);
+  secret_service_search (NULL, EPHY_SYNC_SECRET_SCHEMA, attributes,
+                         SECRET_SEARCH_UNLOCK | SECRET_SEARCH_LOAD_SECRETS,
+                         self->cancellable, (GAsyncReadyCallback)load_secrets_cb, self);
 
   g_hash_table_unref (attributes);
   g_free (user);
 }
 
 static void
-store_secrets_cb (GObject         *source_object,
+store_secrets_cb (SecretService   *service,
                   GAsyncResult    *result,
                   EphySyncService *self)
 {
   GError *error = NULL;
 
-  secret_password_store_finish (result, &error);
+  secret_service_store_finish (service, result, &error);
   if (error) {
     if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
       return;
@@ -1823,6 +1823,7 @@ ephy_sync_service_store_secrets (EphySyncService *self)
 {
   JsonNode *node;
   JsonObject *object;
+  SecretValue *secret;
   GHashTable *attributes;
   GHashTableIter iter;
   gpointer key;
@@ -1842,6 +1843,7 @@ ephy_sync_service_store_secrets (EphySyncService *self)
   json_node_set_object (node, object);
   json_string = json_to_string (node, FALSE);
 
+  secret = secret_value_new (json_string, -1, "text/plain");
   attributes = secret_attributes_build (EPHY_SYNC_SECRET_SCHEMA,
                                         EPHY_SYNC_SECRET_ACCOUNT_KEY, self->user,
                                         NULL);
@@ -1849,12 +1851,13 @@ ephy_sync_service_store_secrets (EphySyncService *self)
   label = g_strdup_printf (_("The sync secrets of %s"), self->user);
 
   LOG ("Storing sync secrets...");
-  secret_password_storev (EPHY_SYNC_SECRET_SCHEMA,
-                          attributes, NULL, label, json_string, NULL,
-                          (GAsyncReadyCallback)store_secrets_cb, self);
+  secret_service_store (NULL, EPHY_SYNC_SECRET_SCHEMA,
+                        attributes, NULL, label, secret, NULL,
+                        (GAsyncReadyCallback)store_secrets_cb, self);
 
   g_free (label);
   g_free (json_string);
+  secret_value_unref (secret);
   g_hash_table_unref (attributes);
   json_object_unref (object);
   json_node_unref (node);
